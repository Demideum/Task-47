namespace Task_47
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Store store = new Store();
            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine("Администрирования супермаркетом.\n\n1 - Cоздать очередь клиентов." +
                    "\n2 - Обслужить очередь клиентов.\n3 - Выход из программы.");
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case "1":
                        store.CreateClientQueue();
                        break;
                    case "2":
                        store.ServeClients();
                        break;
                    case "3":
                        isWork = false;
                        break;
                    default:
                        Console.WriteLine("Проверьте правильность ввода!");
                        break;
                }
                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    class Store
    {
        private Queue<Client> _clients = new Queue<Client>();
        private List<Product> _products = new List<Product>();
        private Random _random = new Random();

        public Store()
        {
            int minimumCountProduct = 2;
            int maximumCountProduct = 10;
            int countProduct = _random.Next(minimumCountProduct, maximumCountProduct);

            for (int i = 0; i < countProduct; i++)
            {
                _products.Add(new Product(GetPriceProduct()));
            }
        }

        public void CreateClientQueue()
        {
            int minimumCountClient = 2;
            int maximumCountClient = 10;
            int countClient = _random.Next(minimumCountClient, maximumCountClient);

            for (int i = 0; i < countClient; i++)
            {
                _clients.Enqueue(GetClient());
            }

            Console.WriteLine($"Очередь из {countClient} клиентов создана.");
        }

        public void ServeClients()
        {
            while (_clients.Count > 0)
            {
                _clients.Dequeue().PurchaseProducts();
            }
            Console.WriteLine("Очередь обслужена.");
        }

        private Client GetClient()
        {
            List<Product> products = new List<Product>();
            int minimumCountProduct = 2;
            int maximumCountProduct = 5;
            int minimumCountMoney = 10;
            int maximumCountMoney = 100;
            int countMoney = _random.Next(minimumCountMoney, maximumCountMoney);
            int countProduct = _random.Next(minimumCountProduct, maximumCountProduct);

            for (int i = 0; i < countProduct; i++)
            {
                products.Add(_products[_random.Next(0, _products.Count - 1)]);
            }

            return new Client(countMoney, products);
        }

        private int GetPriceProduct()
        {
            int minimumCostProduct = 5;
            int maximumCostProduct = 25;
            int priceProduct = _random.Next(minimumCostProduct, maximumCostProduct);
            return priceProduct;
        }
    }

    class Client
    {
        private int _money;
        private List<Product> _productsInBasket;

        public Client(int money, List<Product> productsInBasket)
        {
            _money = money;
            _productsInBasket = productsInBasket;
        }

        public void PurchaseProducts()
        {
            int totalSum = GetTotalSumForProducts();
            ShowProductsBasket();
            Console.WriteLine($"Сумма товаров {totalSum}. У клиента {_money}");

            if (_money >= totalSum)
            {
                Console.WriteLine($"Клиент оплатил товары на сумму {totalSum} и покинул магазин");
            }
            else
            {
                RemoveProductFromBasket();
            }
            Console.ReadKey();
            Console.Clear();
        }

        private void RemoveProductFromBasket()
        {
            while (GetTotalSumForProducts() >= _money)
            {
                ReturnProduct();
            }
        }

        private void ReturnProduct()
        {
            Random random = new Random();
            int index = random.Next(0, _productsInBasket.Count);
            Product productToReturn = _productsInBasket[index];
            Console.WriteLine($"Клиент вернул товар стоимостью {productToReturn.Price}");
            _productsInBasket.Remove(productToReturn);
        }

        private int GetTotalSumForProducts()
        {
            int totalSum = 0;

            totalSum = _productsInBasket.Sum(x => x.Price);

            return totalSum;
        }

        private void ShowProductsBasket()
        {
            Console.WriteLine("Корзина клиента");

            for (int i = 0; i < _productsInBasket.Count; i++)
            {
                Console.WriteLine($"\nТовар {i + 1},");
                _productsInBasket[i].ShowProducts();
            }
        }
    }

    class Product
    {
        public int Price { get; private set; }

        public Product(int price)
        {
            Price = price;
        }

        public void ShowProducts()
        {
            Console.WriteLine($" цена - {Price}");
        }
    }
}
